{"version":3,"sources":["component/contactForm/ContactForm.module.css","component/contactList/elementListContacts.module.css","component/filter/filter.module.css","component/contactForm/contactForm.js","component/contactList/elementListContact.js","component/contactList/ContactList .js","component/filter/filter.js","component/App.js","index.js"],"names":["module","exports","ContactForm","state","name","number","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","onAddContact","reset","this","className","styles","form","onSubmit","spanText","type","onChange","autoComplete","minLength","btn","Component","ElementListContact","propsListContacts","onDeleteContact","map","list","key","id","onClick","ContactList","listContacts","Filter","onchangeFilter","wrap","text","App","contacts","filter","changeFilter","addListWithContactForm","task","contactToAdd","shortId","generate","cont","includes","alert","length","deleteContact","haveLocalStorage","localStorage","getItem","JSON","parse","prevProps","prevState","setItem","stringify","filteredContacts","contact","toLowerCase","filterContacts","propContacts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8cc6c828.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__FRxc0\",\"spanText\":\"ContactForm_spanText__2-n8h\",\"btn\":\"ContactForm_btn__1fZfo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"elementListContacts_list__3FcF9\",\"btn\":\"elementListContacts_btn__3-_KL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"filter_wrap__phPDZ\",\"text\":\"filter_text__3ECOa\"};","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactForm.module.css';\r\n\r\nexport default class ContactForm extends Component {\r\n\r\n    state = {\r\n        name: '',\r\n        number: ''\r\n    }\r\n\r\n    handleChange = e => {\r\n        const { name, value } = e.target;\r\n\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.onAddContact({ ...this.state })\r\n        this.reset()\r\n    }\r\n\r\n    reset = () => {\r\n        this.setState(\r\n            {\r\n                name: '',\r\n                number: ''\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { name, number } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <form className={styles.form} onSubmit={this.handleSubmit}>\r\n                    <span className={styles.spanText}>Name</span>\r\n                    <label>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            value={name}\r\n                            onChange={this.handleChange}\r\n                            autoComplete=\"off\"\r\n                        />\r\n                    </label>\r\n\r\n                    <span className={styles.spanText}>Number</span>\r\n                    <label>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"number\"\r\n                            value={number}\r\n                            onChange={this.handleChange}\r\n                            autoComplete=\"off\"\r\n                            minLength={5}\r\n                        />\r\n                    </label>\r\n                    <button className={styles.btn} type=\"submit\">add contact</button>\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nContactForm.propTypes = {\r\n    onAddContact: PropTypes.func.isRequired,\r\n}\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './elementListContacts.module.css';\r\n\r\nconst ElementListContact = ({ propsListContacts, onDeleteContact }) => (\r\n    <>\r\n        {propsListContacts.map(list =>\r\n            <li className={styles.list} key={list.id}>{list.name}: {list.number}\r\n                <button className={styles.btn} type=\"button\" onClick={() => onDeleteContact(list.id)}>delete</button></li>\r\n        )}\r\n    </>\r\n)\r\n\r\nElementListContact.propTypes = {\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n    propsListContacts: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n    })),\r\n}\r\n\r\nexport default ElementListContact;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ElementListContact from './elementListContact';\r\n\r\nconst ContactList = ({ listContacts, onDeleteContact }) =>\r\n    (\r\n        <>\r\n            <ul>\r\n                <ElementListContact propsListContacts={listContacts} onDeleteContact={onDeleteContact} />\r\n            </ul>\r\n        </>\r\n    )\r\n\r\nContactList.propTypes = {\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n    listContacts: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n    })),\r\n}\r\n\r\nexport default ContactList;","import React from 'react';\r\nimport styles from './filter.module.css';\r\n\r\nconst Filter = ({ value, onchangeFilter }) => (\r\n    <div className={styles.wrap}>\r\n        <span className={styles.text}>Find contacts by name: </span>\r\n        <input\r\n            type=\"text\"\r\n            value={value}\r\n            onChange={onchangeFilter}\r\n        />\r\n    </div>\r\n)\r\n\r\nexport default Filter;","import React, { Component } from 'react';\r\nimport ContactForm from './contactForm/contactForm';\r\nimport ContactList from './contactList/ContactList ';\r\nimport Filter from './filter/filter';\r\nimport shortId from 'shortid';\r\n\r\nconst filterContacts = (contacts, filter) => {\r\n    return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\r\n};\r\n\r\nexport default class App extends Component {\r\n\r\n    state = {\r\n        contacts: [\r\n            { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n            { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n            { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n            { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n        ],\r\n        filter: '',\r\n    }\r\n\r\n    componentDidMount() {\r\n        const haveLocalStorage = localStorage.getItem('contacts')\r\n\r\n        if (haveLocalStorage) {\r\n            this.setState({ contacts: JSON.parse(haveLocalStorage) })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n\r\n        if (prevState.contacts !== this.state.contacts) {\r\n            localStorage.setItem('contacts', JSON.stringify(this.state.contacts))\r\n        }\r\n    }\r\n\r\n    changeFilter = e => {\r\n        this.setState({ filter: e.target.value })\r\n    }\r\n\r\n    addListWithContactForm = task => {\r\n        const contactToAdd = {\r\n            ...task,\r\n            id: shortId.generate(),\r\n        };\r\n        const searchSameName = this.state.contacts.map(cont => cont.name).includes(task.name)\r\n\r\n        if (searchSameName) {\r\n            alert(`${task.name} is already in contacts`)\r\n        } else if (task.name.length === 0) {\r\n            alert('Fields must be filled!')\r\n        } else {\r\n            this.setState(state => ({\r\n                contacts: [...state.contacts, contactToAdd],\r\n            }));\r\n        }\r\n    };\r\n\r\n    deleteContact = id => {\r\n        this.setState(state => ({\r\n            contacts: state.contacts.filter(cont => cont.id !== id)\r\n        }));\r\n    };\r\n\r\n    render() {\r\n        const { contacts, filter } = this.state;\r\n        const filteredContacts = filterContacts(contacts, filter)\r\n\r\n        return (\r\n            <div>\r\n                <h1>Phonebook</h1>\r\n                <ContactForm propContacts={contacts} onAddContact={this.addListWithContactForm} />\r\n                <h2>Contacts</h2>\r\n                {contacts.length >= 2 ? < Filter value={filter} onchangeFilter={this.changeFilter} /> : null}\r\n                <ContactList listContacts={filteredContacts} onDeleteContact={this.deleteContact} />\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './component/App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}